{"version":3,"file":"static/js/86.cd17568b.chunk.js","mappings":"+QACA,GAAgB,cAAgB,4BAA4B,SAAW,uBAAuB,KAAO,mBAAmB,UAAY,yB,SCqCpI,EAhCoB,SAAC,GAAc,IACzBA,EADwB,EAAXC,KACEC,MAAM,EAAG,IAG9B,OAFAC,QAAQC,IAAIJ,IAGR,0BACA,eAAKK,UAAWC,EAAAA,SAAhB,SACDN,EAAQO,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACT,gBAAkBN,UAAWC,EAAAA,SAA7B,UACKG,IAAgB,gBAAKJ,UAAWC,EAAAA,cAAiBM,IAAG,UAXlD,mCAWkD,OAAgBH,GAAgBI,IAAKH,KAE1F,gBAAIL,UAAWC,EAAAA,KAAf,cAAyBI,MACzB,cAAGL,UAAWC,EAAAA,UAAd,8BAA0CK,OAJrCH,WCqCnB,EA7Ca,WAEb,OAA0BM,EAAAA,EAAAA,UAAS,CAC3Bb,KAAM,GACNc,SAAS,EACTC,IAAK,OAHb,eAAOC,EAAP,KAAcC,EAAd,KAMYC,GAAYC,EAAAA,EAAAA,MAAZD,SAGRE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAiB,mCAAG,oGAGlBJ,GAAS,SAAAK,GAAS,yBAAUA,GAAV,IAAqBR,SAAS,OAH9B,UAICS,EAAAA,EAAAA,IAAgBL,GAJjB,OAIZM,EAJY,OAMlBtB,QAAQC,IAAIqB,GAEZP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdtB,KAAK,GAAD,eAAMsB,EAAUtB,OAAhB,OAAyBwB,EAAKxB,OAClCc,SAAS,OAXK,gDAclBG,GAAS,SAAAK,GAAS,yBAAUA,GAAV,IAAqBR,SAAS,EAAOW,MAAK,UAd1C,yDAAH,qDAiBvBJ,MAED,CAACH,IAEJ,IAAQlB,EAAkBgB,EAAlBhB,KAAMc,EAAYE,EAAZF,QAEd,OACI,2BACI,iBAAKV,UAAU,YAAf,UACKU,IAAW,sCACXY,QAAQ1B,EAAK2B,UAAW,SAAC,EAAD,CAAa3B,KAAMA,W,iMC3CtD4B,E,MAAWC,GAAAA,OAAa,CAC1BC,QAAS,+BAETC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAILC,EAAS,mCAAG,sGACEN,EAASO,IAAI,uBADf,uBACbX,EADa,EACbA,KADa,kBAEdA,GAFc,2CAAH,qDAKTY,EAAe,mCAAG,WAAMlB,GAAN,yFACJU,EAASO,IAAT,iBAAuBjB,IADnB,uBACnBM,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfD,EAAe,mCAAG,WAAML,GAAN,yFACJU,EAASO,IAAT,iBAAuBjB,EAAvB,aADI,uBACnBM,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfa,EAAe,mCAAG,WAAMnB,GAAN,yFACJU,EAASO,IAAT,iBAAuBjB,EAAvB,aADI,uBACnBM,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAIfc,EAAY,mCAAG,WAAMC,GAAN,yFACDX,EAASO,IAAT,gBAA8B,CACjDJ,OAAQ,CACJQ,MAAAA,KAHgB,uBAChBf,EADgB,EAChBA,KADgB,kBAMjBA,GANiB,2CAAH","sources":["webpack://react-homework-template/./src/pages/Cast/cast.module.scss?3c4a","pages/Cast/CastContent.jsx","pages/Cast/Cast.jsx","shared/services/movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castItem__Img\":\"cast_castItem__Img__YyXtx\",\"castList\":\"cast_castList__w9Z3z\",\"name\":\"cast_name__Fuw8L\",\"character\":\"cast_character__VDWFM\"};","import PropTypes from 'prop-types';\n\nimport s from \"./cast.module.scss\"\n\nconst BASE_URL = \"https://image.tmdb.org/t/p/w200\"\n\nconst CastContent = ({ cast }) => {\n    const cast_10 = cast.slice(0, 10);\n    console.log(cast_10);\n\n    return (\n        <div>           \n        < ul className={s.castList}>\n      {cast_10.map(({ cast_id, profile_path, name, character }) => (\n          <li key={cast_id} className={s.castItem}>\n              {profile_path && <img className={s.castItem__Img} src={`${BASE_URL}${profile_path}`} alt={name} /> }\n              \n              <h4 className={s.name}> {name}</h4>  \n              <p className={s.character}>{`Character: ${character}`}</p>\n        </li>      \n      ))}\n    </ul>  \n        </div>\n       \n    )\n};\n\nCastContent.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      profile_path: PropTypes.string,\n      name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n  };\n\nexport default CastContent;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCredits } from \"../../shared/services/movies\";\nimport CastContent from \"./CastContent\";\n\n\nconst Cast = () => {\n\nconst [state, setState] = useState({\n        cast: [],\n        loading: false,\n        err: null\n});\n    \n    const { movieId } = useParams();\n      \n\n    useEffect(() => {\n        const fetchMovieCredits = async () => {\n                                   \n            try {\n                setState(prevState => ({ ...prevState, loading: true }))\n                const data = await getMovieCredits(movieId);\n                \n                console.log(data);\n                \n                setState(prevState => ({\n                    ...prevState,\n                    cast: [...prevState.cast, ...data.cast],                    \n                    loading: false\n                }))\n            } catch (error) {\n                setState(prevState => ({ ...prevState, loading: false, error }))\n            }\n        };\n        fetchMovieCredits();\n        \n    }, [movieId]);\n\n    const { cast, loading } = state;\n\n    return (\n        <main>         \n            <div className=\"container\">\n                {loading && <p>...Loading</p>}\n                {Boolean(cast.length) && <CastContent cast={cast}/>}              \n            </div>           \n        </main>      \n    )\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n     \n    params: {\n        api_key: \"f05a275bd04be2a259f3c9758d33fde7\",\n        language: \"en-US\",\n    }\n});\n\nexport const getMovies = async () => {\n    const { data } = await instance.get(\"/trending/movie/day\");\n    return data;\n};\n\nexport const getMovieDetails = async movieId => {\n    const { data } = await instance.get(`/movie/${movieId}`);\n    return data;\n};\n\nexport const getMovieCredits = async movieId => {\n    const { data } = await instance.get(`/movie/${movieId}/credits`);\n    return data;\n};\n\nexport const getMovieReviews = async movieId => {\n    const { data } = await instance.get(`/movie/${movieId}/reviews`);\n    return data;\n};\nexport const searchMovies = async query => {\n    const { data } = await instance.get(`/search/movie`, {\n        params: {\n            query,            \n        }\n    });\n    return data;\n};"],"names":["cast_10","cast","slice","console","log","className","s","map","cast_id","profile_path","name","character","src","alt","useState","loading","err","state","setState","movieId","useParams","useEffect","fetchMovieCredits","prevState","getMovieCredits","data","error","Boolean","length","instance","axios","baseURL","params","api_key","language","getMovies","get","getMovieDetails","getMovieReviews","searchMovies","query"],"sourceRoot":""}